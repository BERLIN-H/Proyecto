{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useAppointmentData.js\nimport { useState, useEffect } from 'react';\nconst useAppointmentData = user => {\n  _s();\n  const [services, setServices] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_PREFIX = '/api';\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000' + API_PREFIX;\n  const loadServices = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/services`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const data = await response.json();\n      setServices(data);\n    } catch (err) {\n      console.error('Error cargando servicios:', err);\n      setError(err.message);\n      setServices([{\n        id: 1,\n        name: 'Consulta Individual',\n        duration: 60,\n        price: 80000\n      }, {\n        id: 2,\n        name: 'Terapia de Pareja',\n        duration: 90,\n        price: 120000\n      }, {\n        id: 3,\n        name: 'Terapia Familiar',\n        duration: 90,\n        price: 150000\n      }, {\n        id: 4,\n        name: 'Evaluaci贸n Psicol贸gica',\n        duration: 120,\n        price: 200000\n      }]);\n    }\n  };\n  const loadAppointments = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/appointments`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const data = await response.json();\n      setAppointments(data);\n    } catch (err) {\n      console.error('Error cargando citas:', err);\n      setError(err.message);\n    }\n  };\n  const createAppointment = async appointmentData => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/appointments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(appointmentData)\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const newAppointment = await response.json();\n      setAppointments(prev => [...prev, newAppointment]);\n      return newAppointment;\n    } catch (err) {\n      console.error('Error creando cita:', err);\n      const newAppointment = {\n        id: Date.now(),\n        ...appointmentData,\n        status: 'pending',\n        reminder_sent: false\n      };\n      setAppointments(prev => [...prev, newAppointment]);\n      return newAppointment;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateAppointment = async (id, updateData) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/appointments/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updateData)\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const updatedAppointment = await response.json();\n      setAppointments(prev => prev.map(apt => apt.id === id ? updatedAppointment : apt));\n      return updatedAppointment;\n    } catch (err) {\n      console.error('Error actualizando cita:', err);\n      setAppointments(prev => prev.map(apt => apt.id === id ? {\n        ...apt,\n        ...updateData\n      } : apt));\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getAvailableSlots = async (date, serviceId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/available-slots?date=${date}&serviceId=${serviceId}`);\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      return await response.json();\n    } catch (err) {\n      console.error('Error obteniendo horarios:', err);\n      const sampleTimeSlots = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'];\n      const occupiedSlots = appointments.filter(apt => apt.date === date && apt.status !== 'cancelled').map(apt => apt.time);\n      return sampleTimeSlots.filter(slot => !occupiedSlots.includes(slot));\n    }\n  };\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      await Promise.all([loadServices(), loadAppointments()]);\n      setLoading(false);\n    };\n    loadInitialData();\n  }, []);\n  return {\n    services,\n    appointments,\n    loading,\n    error,\n    createAppointment,\n    updateAppointment,\n    getAvailableSlots,\n    refreshData: () => Promise.all([loadServices(), loadAppointments()])\n  };\n};\n_s(useAppointmentData, \"6Ai5wXeD0blvRJhEBmYgqiEmt5A=\");\nexport default useAppointmentData;","map":{"version":3,"names":["useState","useEffect","useAppointmentData","user","_s","services","setServices","appointments","setAppointments","loading","setLoading","error","setError","API_PREFIX","API_BASE_URL","process","env","REACT_APP_API_URL","loadServices","response","fetch","method","headers","ok","Error","status","statusText","data","json","err","console","message","id","name","duration","price","loadAppointments","createAppointment","appointmentData","body","JSON","stringify","newAppointment","prev","Date","now","reminder_sent","updateAppointment","updateData","updatedAppointment","map","apt","getAvailableSlots","date","serviceId","sampleTimeSlots","occupiedSlots","filter","time","slot","includes","loadInitialData","Promise","all","refreshData"],"sources":["/Users/eduardosierra/Documents/ProAvanzadaProyectos/Proyecto/frontend/src/hooks/useAppointmentData.js"],"sourcesContent":["// hooks/useAppointmentData.js\nimport { useState, useEffect } from 'react';\n\nconst useAppointmentData = (user) => {\n  const [services, setServices] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\nconst API_PREFIX = '/api';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000' + API_PREFIX;\n\n\n  const loadServices = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/services`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const data = await response.json();\n      setServices(data);\n    } catch (err) {\n      console.error('Error cargando servicios:', err);\n      setError(err.message);\n      setServices([\n        { id: 1, name: 'Consulta Individual', duration: 60, price: 80000 },\n        { id: 2, name: 'Terapia de Pareja', duration: 90, price: 120000 },\n        { id: 3, name: 'Terapia Familiar', duration: 90, price: 150000 },\n        { id: 4, name: 'Evaluaci贸n Psicol贸gica', duration: 120, price: 200000 }\n      ]);\n    }\n  };\n\n  const loadAppointments = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/appointments`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const data = await response.json();\n      setAppointments(data);\n    } catch (err) {\n      console.error('Error cargando citas:', err);\n      setError(err.message);\n    }\n  };\n\n  const createAppointment = async (appointmentData) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/appointments`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(appointmentData)\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const newAppointment = await response.json();\n      setAppointments(prev => [...prev, newAppointment]);\n      return newAppointment;\n    } catch (err) {\n      console.error('Error creando cita:', err);\n      const newAppointment = {\n        id: Date.now(),\n        ...appointmentData,\n        status: 'pending',\n        reminder_sent: false\n      };\n      setAppointments(prev => [...prev, newAppointment]);\n      return newAppointment;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateAppointment = async (id, updateData) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/appointments/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updateData)\n      });\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      const updatedAppointment = await response.json();\n      setAppointments(prev => prev.map(apt => apt.id === id ? updatedAppointment : apt));\n      return updatedAppointment;\n    } catch (err) {\n      console.error('Error actualizando cita:', err);\n      setAppointments(prev => prev.map(apt => apt.id === id ? { ...apt, ...updateData } : apt));\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAvailableSlots = async (date, serviceId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/available-slots?date=${date}&serviceId=${serviceId}`);\n      if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);\n      return await response.json();\n    } catch (err) {\n      console.error('Error obteniendo horarios:', err);\n      const sampleTimeSlots = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'];\n      const occupiedSlots = appointments\n        .filter(apt => apt.date === date && apt.status !== 'cancelled')\n        .map(apt => apt.time);\n      return sampleTimeSlots.filter(slot => !occupiedSlots.includes(slot));\n    }\n  };\n\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      await Promise.all([loadServices(), loadAppointments()]);\n      setLoading(false);\n    };\n    loadInitialData();\n  }, []);\n\n  return {\n    services,\n    appointments,\n    loading,\n    error,\n    createAppointment,\n    updateAppointment,\n    getAvailableSlots,\n    refreshData: () => Promise.all([loadServices(), loadAppointments()])\n  };\n};\n\nexport default useAppointmentData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}